# QuizShow 애플리케이션 데이터 구조 및 세션 관리

## 데이터베이스 구조

### 1. Firebase 구성
- **Firestore**: 정적 퀴즈 콘텐츠 저장 (퀴즈, 문제, 사용자 정보 등) 및 활동 기록 저장
- **Realtime Database**: 세션, 참가자, 실시간 응답 데이터 관리
- **인증**: Firebase 인증 서비스 사용

### 2. Realtime Database 경로
- `/sessions/{sessionId}` - 세션 정보 (실시간 세션 데이터 저장)
- `/sessionCodes/{code}` - 세션 코드와 세션 ID 매핑 (세션 코드로 세션 조회 시 사용)
- `/userSessions/{userId}/active/{sessionId}` - 사용자별 활성 세션 (특정 사용자의 활성 세션 조회 시 사용)
- `/participants/{sessionId}/{userId}` - 세션 참가자 목록 (세션별 참가자 정보 관리)
- `/sessionQuestions/{sessionId}/{questionIndex}` - 세션별 문제 상태 (현재 문제가 공개되었는지 여부, 시작/종료 시간)
- `/sessionAnswers/{sessionId}_question_{questionIndex}/{userId}` - 참가자 응답 데이터 (문제별 참가자 응답 저장)

### 3. Firestore 콜렉션
- `users/{userId}` - 사용자 정보 (프로필, 설정 등)
- `users/{userId}/quizzes/{quizId}` - 사용자별 퀴즈 정보 (퀴즈 제목, 설명, 생성일 등)
- `users/{userId}/sessionHistories/{historyId}` - 사용자별 활동 기록 (종료된 세션의 모든 데이터가 저장됨)

## 주요 타입 정의

### 세션 관련 타입
```typescript
interface Session {
  id: string;
  quizId: string;
  hostId: string;
  code: string;
  currentQuestion: number;
  createdAt: number;
  startedAt: number | null;
  endedAt: number | null;
  participantCount: number;
  expiresAt: number;
}

interface Participant {
  id: string;
  name: string;
  joinedAt: number;
  isActive: boolean;
  score: number;
}

interface QuestionStatus {
  revealed: boolean;
  startedAt: number | null;
  endedAt: number | null;
}

interface Answer {
  answer: string;
  answeredAt: number;
  isCorrect: boolean;
  score: number;
}
```

### 세션 기록 관련 타입
```typescript
interface SessionHistory {
  id?: string;
  hostId: string;
  title: string;
  code: string;
  participantCount: number;
  startedAt: Timestamp; // 시작 시간 (세션 생성 시간)
  endedAt: Timestamp | null;
  participants: Record<string, Participant>;
  quiz: Quiz; // 퀴즈 ID 대신 퀴즈 데이터 자체를 저장
}
```

### 퀴즈 관련 타입
```typescript
interface Quiz {
  id: string;
  title: string;
  description?: string;
  createdAt: string;
  updatedAt?: string;
  questions: Question[];
}

interface Question {
  text: string;
  options: string[];
  correctAnswer: number;
}
```

## 주요 서비스 및 컨텍스트

### 1. SessionService (sessionService.ts)
- 세션 CRUD 기능 구현
- 실시간 리스너 설정 (세션, 참가자, 문제 상태, 응답)
- 주요 함수:
  - `createSession` - 새 세션 생성
  - `getSession` - 세션 정보 조회
  - `addParticipant` - 참가자 추가
  - `submitAnswer` - 응답 제출
  - `getSessionsByHostId` - 호스트의 모든 세션 조회
  - `subscribeToSession` - 세션 실시간 구독
  - `deleteSession` - 세션 삭제 및 관련 데이터 정리

### 2. SessionHistoryService (sessionHistoryService.ts)
- 세션 기록 저장 및 조회 기능 구현
- 주요 함수:
  - `saveSessionHistory` - 종료된 세션 데이터를 Firestore에 저장 (퀴즈 전체 데이터 포함)
  - `getSessionHistoriesByHostId` - 호스트의 모든 세션 기록 조회
  - `getSessionHistoryById` - 특정 세션 기록 상세 조회

### 3. SessionContext (SessionContext.tsx)
- 세션 상태 관리 컨텍스트
- 주요 기능:
  - 세션 생성 및 관리
  - 참가자 관리
  - 문제 진행 관리
  - 세션 구독 설정 및 정리
  - 중복 세션 생성 방지 로직
  - 세션 종료 시 세션 기록 저장 (퀴즈 데이터 포함)

### 4. QuizContext (QuizContext.tsx)
- 퀴즈 정보 관리
- 퀴즈 CRUD 작업
- 주요 함수:
  - `createQuiz` - 새 퀴즈 생성
  - `getQuiz` - 퀴즈 정보 조회
  - `updateQuiz` - 퀴즈 수정
  - `deleteQuiz` - 퀴즈 삭제

### 5. AuthContext (AuthContext.tsx)
- 사용자 인증 상태 관리
- 로그인/로그아웃 처리

## 페이지 구성 및 기능

### 1. 호스트 페이지
- **CreateQuiz.tsx**: 새 퀴즈 생성
- **MyQuizzes.tsx**: 사용자의 퀴즈 목록 표시, 퀴즈 시작/관리
- **EditQuiz.tsx**: 퀴즈 수정
- **SessionQuiz.tsx**: 세션 관리, 참가자 목록, 문제 진행
- **ActivityHistory.tsx**: 종료된 세션의 활동 기록 목록 표시
- **SessionHistory.tsx**: 특정 세션의 상세 활동 기록 표시 (참가자, 퀴즈 정보, 진행 시간 등)

### 2. 참가자 페이지
- **JoinQuiz.tsx**: 세션 코드 입력 및 참가
- **PlayQuiz.tsx**: 퀴즈 참여 및 답변 제출

## 데이터 흐름

### 1. 세션 생명주기
1. 호스트가 퀴즈 선택 → 세션 생성 (Realtime Database)
2. 참가자 참여 → 참가자 정보 저장 (Realtime Database)
3. 호스트가 문제 진행 → 문제 상태 업데이트 (Realtime Database)
4. 참가자 응답 제출 → 응답 데이터 저장 (Realtime Database)
5. 세션 종료 → 세션 데이터와 퀴즈 데이터를 Firestore에 저장 → Realtime Database 데이터 삭제

### 2. 활동 기록 조회
1. 호스트가 활동 기록 페이지 접속 → 사용자별 세션 기록 조회 (Firestore)
2. 세션 기록 선택 → 세션 상세 정보 조회 (Firestore)
3. 진행 시간 표시 → 시작 시간(startedAt)과 종료 시간(endedAt)의 차이로 계산

## 최근 개선 사항

### 1. 세션 기록 시스템 개선
- 세션 종료 시 Realtime Database 데이터를 삭제하기 전에 Firestore에 저장
- 사용자별 하위 컬렉션(`users/{userId}/sessionHistories`)에 세션 기록 저장
- 활동 기록 데이터 구조 최적화: 퀴즈 데이터 자체를 저장하고 불필요한 필드 제거
- 세션 시작시간과 종료시간으로 정확한 진행시간 계산

### 2. 세션 중복 생성 방지
- CreateQuiz.tsx, MyQuizzes.tsx에서 세션 생성 시 URL에 sessionId 파라미터 추가
- SessionQuiz.tsx에서 URL 파라미터 확인하여 추가 세션 생성 방지
- SessionContext에서 같은 퀴즈에 대한 활성 세션 이미 존재하는지 확인하는 로직 추가

### 3. 보안 및 접근 제어
- 사용자별 데이터 분리로 보안성 강화
- 세션 데이터는 임시 데이터로 Realtime Database에 저장, 영구 데이터는 Firestore에 저장
- 마이그레이션 용이성 향상

## Firebase 설정

### 1. Realtime Database 설정
- 아시아 리전 데이터베이스 URL 사용
- 보안 규칙: 인증된 사용자만 세션 생성 가능, 참가자는 해당 세션 데이터만 접근 가능

### 2. Firestore 설정
- 적절한 인덱싱 설정
- 보안 규칙: 
  - 퀴즈: 생성자만 편집 가능
  - 세션 기록: 호스트만 조회 가능

## 개발 작업 흐름

1. 퀴즈 생성 → 세션 생성 → 참가자 초대 → 퀴즈 진행 → 결과 확인 → 활동 기록 저장
2. 세션 관리 최적화: 필요 시에만 세션 생성하여 리소스 절약
3. 데이터 구독 관리: 컴포넌트 언마운트 시 구독 정리하여 메모리 누수 방지
4. 사용자 경험: 호스트는 세션 관리와 기록 조회, 참가자는 간편한 참여와 응답 제출 